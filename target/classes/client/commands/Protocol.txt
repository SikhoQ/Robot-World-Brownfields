Robot World: Protocol
The client sends request messages to the server and receives response messages from the server. Every request must be replied to by a response.

Request Message
A request is a JSON string with the following structure.

Structure of a Request Message
{
  "robot": "name of the robot",
  "command": "name of the command",
  "arguments": [ value1, value2, ...]
}
Mandatory. String: the name of the robot.
Mandatory. String: the name of a command. Must be one of launch, look, forward, back, turn, repair, reload, fire, state Must be lower-case.
Mandatory. Array: arguments for the command with value1 being the first argument, value2 being the second, etc. The type and meaning of the arguments are specific for the command. If there are not arguments, then the array is empty.
See the Command Specifications below for more details.

Response Message
A response is a JSON string with the following structure.

Structure of a Response Message
{
  "result": "result of the command",
  "data": {
    "key1": value1,
    "key2": value2,
    ...
  },
  "state: {
    "position": [x,y],
    "direction": "direction that the robot is facing",
    "shields": number of hits that can be absorbed,
    "shots": number of shots left,
    "status": "operational status that the robot is in"
   }
}
Mandatory. String: The result of trying to execute the command. If it was successfully processed by the world, then the value is OK otherwise ERROR.
Mandatory. Map: Every response has a data key.
Key-Value: The data consists of one or more key-value pairs that is unique for the response for the specific command.
Optional. Map: A response has a state map only if the result value is OK.
Array: The coordinates of the current position of the robot as an array with two elements.
String: This is the direction that the robot is currently facing, being one of NORTH, SOUTH, EAST, WEST.
Integer: Representing the number of hits that the shields can still absorb.
Integer: Represents the number of shots left in the gun.
String: The operational mode in which the robot is in at the moment being one of RELOAD, REPAIR, NORMAL, DEAD.
RELOAD - the robot is reloading weapons
REPAIR - the robot is repairing shields
NORMAL - the robot is waiting for the next command
DEAD - the robot is dead and is no longer in the world.

See the Command Specifications below for more details.

General Responses
The following are general response messages for badly formed requests.

Server could not parse the request arguments
In the situation where the server cannot parse the arguments for a command in a request message then the following response must be returned.

{
  "result": "ERROR",
  "data": {
    message: "Could not parse arguments"
  }
}
Server does not support the command
In the situation where the server does not support the command requested, the following response must be returned.

{
  "result": "ERROR",
  "data": {
    message: "Unsupported command"
  }
}
Command Specifications
The following are specifications for request and response messages for each command. Some keys are left out for brevity and replaced with …​. This means that you should fill in the missing values as appropriate.

Launch
Launch a robot into the world.

Request

{
  "robot": ...,
  "command": "launch",
  "arguments": [ kind,
                 maximum shield strength,
                 maximum shots
               ]
}
String: The name of the kind of robot that is being launched. This is your uniquely programmed model of robot.
Integer: The configured maximum shield strength of the robot in hits before it can be killed.
Integer: The maximum number of shots that the robot can take before reloading.
Response: Successful

{
  "result": "OK",
  "data": {
    position: [x,y],
    "visibility": steps
    "reload": seconds,
    "repair": seconds,
    "shields": hits
  },
  "state": {
    "position": [x,y],
    "direction: "NORTH",
    "shields": hits,
    "shots": shots,
    "status": "NORMAL"
   }
}
Array: the coordinates of the position of the robot
Integer: The world’s configured visibility in number of steps.
Integer: The number of seconds that it takes to reload weapons to the maximum number of shots.
Integer: The number of seconds that it takes to repair shields to the maximum.
Integer: The maximum strength of shields
Array: The coordinates of the position of the robot. This should be the same as in the data position key.
String: The robot will always face north when launched.
Integer: The robot starts with maximum shield strength for which it was configured
Integer: The robot starts with maximum number of shots for which it was configured
The robot starts off in NORMAL operational mode
Response: No free location

{
  "result": "ERROR",
  "data": {
    "message": "No more space in this world"
  }
}
Response: Name already taken

{
  "result": "ERROR",
  "data": {
    "message": "Too many of you in this world"
  }
}
State
Ask the world for the state of the robot.

Request

{
  "robot": ...,
  "command": "state",
  "arguments": []
}
Response: Successful

{
  "state": {
  ...
  }
}
The state information is returned as describe in Response Message.
Look
Look around in the world.

Request

{
  "robot": ...,
  "command": "look",
  "arguments": []
}
Response: Successful

{
  "result": "OK",
  "data": {
    "objects": [
        {
            "direction": ...,
            "type": type of object,
            "distance": steps
        },
        { ... },
        ...
    ]
  },
  "state": { ... }
}
Array: The data contains a list of objects.
Map: Each object is a map of key-value pairs.
String: The direction in which the object can be found, being one of NORTH, SOUTH, EAST, `WEST
String: The type of object seen. The following object types must be supported. Note that it is possible to have other types of objects as programmed in the server world.
OBSTACLE - the object is an obstacle

ROBOT - the object is a robot

EDGE - the object is the boundary of the world.

Integer: How far the object is from the robot in steps.
The next object in the array.
The state of the robot
Movement
Move forward or backward in the world

Request

{
  "robot": ...,
  "command": "forward" or "back"
  "arguments": [steps]
}
String: The command is one of forward or back.
Integer: number of steps to move either forward or back.
Response: Successful - the robot was able to take the number of steps

{
  "result": "OK",
  "data": {
    "message": "Done"
  },
  "state": { ... }
}
The state should be updated with the new position.
Response: Obstacle/Robot in the way

{
  "result": "OK",
  "data": {
    "message": "Obstructed"
  },
  "state": {
    "position": [x,y],
    ...
  }
}
The position is set to the coordinates of the last possible step the robot was able to take before it was obstructed.
Turn
Turn left or right

Request

{
  "robot": ...,
  "command": "turn",
  "arguments": ["left" or "right"]
}
String: Which way the robot must turn, either "left" or "right".
Response: Successful

{
  "result": "OK",
  "data": {
    "message": "Done"
  },
  "state": {
    "direction": direction,
    ...
  }
}
String: The direction that the robot is now facing, being one of NORTH, SOUTH, EAST, WEST.
Repair
Instruct the robot to repair its shields

Request

{
  "robot": ...,
  "command": "repair",
  "arguments": []
}
Response: Successful

{
  "result": "OK",
  "data": {
    "message": "Done"
  },
  "state": {
    "status": "REPAIR"
    ...
  }
}
Reload
Instruct the robot to reload its weapons.

Request

{
  "robot": ...,
  "command": "reload",
  "arguments": []
}
Response: Successful

{
  "result": "OK",
  "data": {
    "message": "Done"
  },
  "state": {
    "status": "RELOAD"
    ...
  }
}
Fire
Instruct the robot to fire its gun.

Request

{
  "robot": ...,
  "command": "fire",
  "arguments": []
}
Response: Hit another robot

{
  "result": "OK",
  "data": {
    "message": "Hit",
    "distance": steps,
    "robot": name
    "state": { ... }
  },
  "state": {
    "shots":  shots
  }
}
Integer: The distance of the robot that was hit from this robot’s current position.
String: The name of the robot that was hit.
Map: The state information of the robot that was hit as per the Response Message specification.
Integer: The number of shots left is updated.
Response: Miss

{
  "result": "OK",
  "data": {
    "message": "Miss"
  },
  "state": {
    "shots":  shots
  }
}
Integer: The number of shots left is updated.
